--
--  spectral-norm.kf
--  Based on code from the Computer Language Benchmarks Game
--  https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
--

def A( i, j )
    return 1.0 / ( ( i + j ) * ( 1 + j + 1 ) * 0.5 + i + 1 )
end

def multiplyAv( n, v, Av )
    for i = 0 : n do
        var x = 0.0
        for j = 0 : n do x += A( i, j ) * v[ j ] end
        Av[ i ] = x
    end
end

def multiplyAtv( n, v, Atv )
    for i = 0 : n do
        var x = 0.0
        for j = 0 : n do x += A( j, i ) * v[ j ] end
        Atv[ i ] = x
    end
end

var x = []

def multiplyAtAv( n, v, AtAv )
    multiplyAv( n, v, x )
    multiplyAtv( n, x, AtAv )
end

var _, n = args ...
n = if n then number( n ) else 100

var u, v = [], []
u.resize( n )
v.resize( n )
x.resize( n )

-- Create unit vector.
for i = 0 : n do u[ i ] = 1.0 end

-- 20 steps of the power method.
for i = 0 : 10 do
    multiplyAtAv( n, u, v )
    multiplyAtAv( n, v, u )
end

-- B=AtA A multiplied by A transposed
-- v.Bv /(v.v) eigenvalue of v
var vBv, vv = 0, 0
for i = 0 : n do
    vBv += u[ i ] * v[ i ]
    vv  += v[ i ] * v[ i ]
end

print( string( sqrt( vBv / vv ) ) ~ "\n" )

