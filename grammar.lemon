//
//  grammar.lemon
//
//  Created by Edmund Kapusniak on 28/09/2019.
//  Copyright Â© 2019 Edmund Kapusniak.
//
//  Licensed under the MIT License. See LICENSE file in the project root for
//  full license information.
//

%include
{
#include <assert.h>
#include "lexer.h"
#include "parser.h"

using namespace kf;

enum expr_kind
{
    EXPR_NONE,      // Empty expression list.
    EXPR_NAME,      // name
    EXPR_LVAL,      // name.key / name[ index ]
    EXPR_CALL,      // name( args )
    EXPR_FULL,      // any other expression
    EXPR_NAME_LIST, // name, name
    EXPR_LVAL_LIST, // name, name.key, expr(x)[ index ]
    EXPR_FULL_LIST, // any other expression list
    EXPR_UNPACK,    // expression list with ... at end
};

struct expr_type
{
    expr_kind kind;
    size_t index;
};

}


%name KenafParse
%token_prefix TOKEN_
%extra_argument { parser* p }
%token_type { token }
%token_destructor { (void)p; }
%syntax_error { p->syntax_error( TOKEN ); }
%default_type { size_t }


// ( expr )( expr ) is ambiguous, resolve as a function call.

%nonassoc PREFER_CALL .
%nonassoc LPN .


// SCRIPT

script ::= block .


// STATEMENTS

block ::= stmt_list .
block ::= stmt_list last_stmt .
block ::= stmt_list last_stmt SEMICOLON .

stmt_list ::= .
stmt_list ::= stmt_list stmt .
stmt_list ::= stmt_list stmt SEMICOLON .

stmt ::= expr_call . [PREFER_CALL]
stmt ::= stmt_assign .
stmt ::= definition .
stmt ::= VAR name_list .
stmt ::= VAR name_list ASSIGN assign_rval .
stmt ::= YIELD unpack_list .
stmt ::= YIELD FOR expr_call . [PREFER_CALL]
stmt ::= THROW expr .
stmt ::= DO block END .
stmt ::= IF expr THEN block elif_list_opt else_opt END .
stmt ::= FOR name_list ASSIGN expr COLON expr step_opt DO block END .
stmt ::= FOR name_list COLON expr DO block END .
stmt ::= WHILE expr DO block END .
stmt ::= REPEAT block UNTIL expr .

elif_list_opt ::= .
elif_list_opt ::= elif_list_opt ELIF expr THEN block .

else_opt ::= .
else_opt ::= ELSE block .

step_opt ::= .
step_opt ::= COLON expr .

name_list ::= IDENTIFIER .
name_list ::= name_list COMMA IDENTIFIER .

last_stmt ::= RETURN .
last_stmt ::= RETURN unpack_list .
last_stmt ::= BREAK .
last_stmt ::= CONTINUE .

stmt_assign ::= lval_list op_assign assign_rval .

assign_rval ::= unpack_list .
assign_rval ::= YIELD unpack_list .
assign_rval ::= YIELD FOR expr_call . [PREFER_CALL]
assign_rval ::= YIELD FOR expr_call ELLIPSIS .
assign_rval ::= unpack_list /* lval_list */ op_assign assign_rval .

op_assign ::= ASSIGN .
op_assign ::= MUL_ASSIGN .
op_assign ::= DIV_ASSIGN .
op_assign ::= INTDIV_ASSIGN .
op_assign ::= MOD_ASSIGN .
op_assign ::= ADD_ASSIGN .
op_assign ::= SUB_ASSIGN .
op_assign ::= CONCAT_ASSIGN .
op_assign ::= LSHIFT_ASSIGN .
op_assign ::= RSHIFT_ASSIGN .
op_assign ::= ASHIFT_ASSIGN .
op_assign ::= BITAND_ASSIGN .
op_assign ::= BITXOR_ASSIGN .
op_assign ::= BITOR_ASSIGN .


// EXPRESSIONS

%type expr_lval { expr_type }
%type lval_list { expr_type }
%type expr_prefix { expr_type }
%type expr_call { expr_type }
%type expr_literal { expr_type }
%type expr_unary { expr_type }
%type expr_muldiv { expr_type }
%type expr_addsub { expr_type }
%type expr_shift { expr_type }
%type expr_bitand { expr_type }
%type expr_bitxor { expr_type }
%type expr_bitor { expr_type }
%type expr_compare { expr_type }
%type expr_not { expr_type }
%type expr_and { expr_type }
%type expr_or { expr_type }
%type expr { expr_type }
%type unpack_list_opt { expr_type }
%type unpack_list { expr_type }
%type term_list { expr_type }

expr_lval ::= IDENTIFIER .
expr_lval ::= expr_prefix PERIOD IDENTIFIER .
expr_lval ::= expr_prefix LSQ expr RSQ .

lval_list ::= expr_lval .
lval_list ::= lval_list COMMA expr_lval .

expr_prefix ::= expr_lval .
expr_prefix ::= expr_call . [LPN]
expr_prefix ::= LPN expr RPN .

expr_call ::= expr_prefix LPN unpack_list_opt RPN .

expr_literal ::= expr_prefix . [PREFER_CALL]
expr_literal(x) ::= NULL(tok) .                { x = { EXPR_FULL, p->leaf_node( AST_EXPR_NULL, tok.sloc ) }; }
expr_literal(x) ::= FALSE(tok) .               { x = { EXPR_FULL, p->leaf_node( AST_EXPR_FALSE, tok.sloc ) }; }
expr_literal(x) ::= TRUE(tok) .                { x = { EXPR_FULL, p->leaf_node( AST_EXPR_TRUE, tok.sloc ) }; }
expr_literal(x) ::= NUMBER(tok) .              { x = { EXPR_FULL, p->number_node( AST_EXPR_NUMBER, tok.sloc, tok.n ) }; }
expr_literal(x) ::= STRING(tok) .              { x = { EXPR_FULL, p->string_node( AST_EXPR_STRING, tok.sloc, tok.text, tok.size ) }; }
/*
expr_atom(x) ::= IDENTIFIER(tok) .          { x = { EXPR_NAME, p->string_node( AST_EXPR_IDENTIFIER, tok.sloc, tok.text, tok.size ) }; }
expr_atom(x) ::= expr_atom(u) PERIOD(op) IDENTIFIER(tok) .
    {
        p->string_node( AST_EXPR_IDENTIFIER, tok.sloc, tok.text, tok.size );
        x = { EXPR_LVAL, p->node( AST_EXPR_KEY, op.sloc, u.index ) };
    }
expr_atom(x) ::= expr_paren(u) LSQ(op) expr RSQ .
    {
        x = { EXPR_LVAL, p->node( AST_EXPR_INDEX, op.sloc, u.index ) };
    }
expr_atom(x) ::= expr_paren(u) LPN(op) unpack_list_opt RPN .
    {
        x = { EXPR_CALL, p->node( AST_EXPR_CALL, op.sloc, u.index ) };
    }
*/

expr_unary(x) ::= expr_literal(u) .            { x = u; }
expr_unary(x) ::= HASH(op) expr_unary(u) .  { x = { EXPR_FULL, p->node( AST_EXPR_LENGTH, op.sloc, u.index ) }; }
expr_unary(x) ::= MINUS(op) expr_unary(u) . { x = { EXPR_FULL, p->node( AST_EXPR_NEG, op.sloc, u.index ) }; }
expr_unary(x) ::= PLUS(op) expr_unary(u) .  { x = { EXPR_FULL, p->node( AST_EXPR_POS, op.sloc, u.index ) }; }
expr_unary(x) ::= TILDE(op) expr_unary(u) . { x = { EXPR_FULL, p->node( AST_EXPR_BITNOT, op.sloc, u.index ) }; }

expr_muldiv ::= expr_unary .
expr_muldiv ::= expr_muldiv ASTERISK expr_unary .
expr_muldiv ::= expr_muldiv SOLIDUS expr_unary .
expr_muldiv ::= expr_muldiv INTDIV expr_unary .
expr_muldiv ::= expr_muldiv PERCENT expr_unary .

expr_addsub ::= expr_muldiv .
expr_addsub ::= expr_addsub PLUS expr_muldiv .
expr_addsub ::= expr_addsub MINUS expr_muldiv .
expr_addsub ::= expr_addsub TILDE expr_muldiv .

expr_shift ::= expr_addsub .
expr_shift ::= expr_shift LSHIFT expr_addsub .
expr_shift ::= expr_shift RSHIFT expr_addsub .
expr_shift ::= expr_shift ASHIFT expr_addsub .

expr_bitand ::= expr_shift .
expr_bitand ::= expr_bitand AMPERSAND expr_shift .

expr_bitxor ::= expr_bitand .
expr_bitxor ::= expr_bitxor CARET expr_bitand .

expr_bitor ::= expr_bitxor .
expr_bitor ::= expr_bitor VBAR expr_bitxor .

expr_compare ::= expr_bitor .
expr_compare ::= expr_compare op_compare expr_bitor .

op_compare ::= EQ .
op_compare ::= NE .
op_compare ::= LT .
op_compare ::= LE .
op_compare ::= GT .
op_compare ::= GE .
op_compare ::= IS .
op_compare ::= IS NOT .

expr_not ::= expr_compare .
expr_not ::= NOT expr_not .

expr_and ::= expr_not .
expr_and ::= expr_and AND expr_not .

expr_or ::= expr_and .
expr_or ::= expr_or OR expr_and .

constructor ::= DEF LPN parameters RPN lambda_body .
constructor ::= DEF YIELD LPN parameters RPN lambda_body .
constructor ::= DEF prototype_opt object_keys END .
constructor ::= LSQ unpack_list_opt RSQ .
constructor ::= LBR keyval_list_opt RBR .

lambda_body ::= COLON expr .
lambda_body ::= block END .

expr ::= expr_or .
expr ::= constructor .

unpack_list_opt ::= .
unpack_list_opt ::= unpack_list .

unpack_list ::= term_list .
unpack_list ::= term_list ELLIPSIS .

term_list ::= expr .
term_list ::= term_list COMMA expr .

parameters ::= .
parameters ::= param_list .
parameters ::= param_list ELLIPSIS .

param_list ::= IDENTIFIER .
param_list ::= param_list COMMA IDENTIFIER .

keyval_list_opt ::= .
keyval_list_opt ::= keyval_list_opt COMMA keyval .

keyval ::= expr COLON expr .


// DEFINITIONS

definition ::= DEF qual_name LPN parameters RPN block END .
definition ::= DEF YIELD qual_name LPN parameters RPN block END .
definition ::= DEF qual_name prototype_opt object_keys END .

qual_name ::= IDENTIFIER .
qual_name ::= qual_name PERIOD IDENTIFIER .

prototype_opt ::= .
prototype_opt ::= IS expr .

object_keys ::= .
object_keys ::= object_keys object_key .

object_key ::= IDENTIFIER COLON expr .
object_key ::= IDENTIFIER COLON expr SEMICOLON .
object_key ::= definition .


// TRY CATCH
/*
stmt ::= WITH unpack_list DO block END .
stmt ::= WITH unpack_list /* name_list *//* ASSIGN unpack_list DO block END .
stmt ::= TRY block catch_list_opt finally_opt END .

catch_list_opt ::= .
catch_list_opt ::= catch_list_opt catch .

catch ::= CATCH IDENTIFIER THEN block .
catch ::= CATCH IDENTIFIER IS expr THEN block .

finally_opt ::= FINALLY block .
*/

