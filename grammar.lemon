//
//  grammar.lemon
//
//  Created by Edmund Kapusniak on 28/09/2019.
//  Copyright Â© 2019 Edmund Kapusniak.
//
//  Licensed under the MIT License. See LICENSE file in the project root for
//  full license information.
//

%include
{
#include <assert.h>
#include "lexer.h"
#include "parser.h"

using namespace kf;

struct maybe_list_type
{
    size_t index;
    bool is_list;
};

struct op_assign_type
{
    size_t index;
    srcloc sloc;
};

enum expr_kind
{
    EXPR_NAME,          // name
    EXPR_LVAL,          // name.key / name[ index ]
    EXPR_CALL,          // name( args )
    EXPR_FULL,          // any other expression
    EXPR_NAME_LIST,     // name, name
    EXPR_LVAL_LIST,     // name, name.key, expr(x)[ index ]
    EXPR_FULL_LIST,     // any other expression list
    EXPR_EMPTY_LIST,    // ()
    EXPR_UNPACK_LIST,   // expression list with ... at end
};

static expr_kind expr_list_kind( expr_kind u, expr_kind v )
{
    // Upgrade u to a list.
    if ( u == EXPR_NAME ) u = EXPR_NAME_LIST;
    else if ( u == EXPR_LVAL ) u = EXPR_LVAL_LIST;
    else u = EXPR_FULL_LIST;

    // Upgrade v to a list.
    if ( v == EXPR_NAME ) v = EXPR_NAME_LIST;
    else if ( v == EXPR_LVAL ) v = EXPR_LVAL_LIST;
    else v = EXPR_FULL_LIST;

    // Return the widest kind of list.
    return (expr_kind)std::max( u, v );
}

struct expr_type
{
    expr_kind kind;
    size_t index;
};

struct term_list_type
{
    expr_kind kind;
    size_t index;
    size_t ilast;
};

}


%name KenafParse
%token_prefix TOKEN_
%extra_argument { parser* p }
%token_type { token }
%token_destructor { (void)p; }
%syntax_error { p->syntax_error( TOKEN ); }
%default_type { size_t }


// ( expr )( expr ) is ambiguous, resolve as a function call.

%nonassoc PREFER_CALL .
%nonassoc LPN .


// SCRIPT

script ::= block .


// STATEMENTS

block(x) ::= stmt_list(u) .                             { x = p->node( AST_BLOCK, p->node_sloc( u ), u ); }
block(x) ::= stmt_list(u) last_stmt .                   { x = p->node( AST_BLOCK, p->node_sloc( u ), u ); }

stmt_list(x) ::= .                                      { x = AST_INVALID_INDEX; }
stmt_list(x) ::= stmt_list(u) stmt(v) .                 { x = u != AST_INVALID_INDEX ? u : v; }
stmt_list(x) ::= stmt_list(u) stmt(v) SEMICOLON .       { x = u != AST_INVALID_INDEX ? u : v; }
stmt_list(x) ::= stmt_list(u) last_stmt(v) SEMICOLON .  { x = u != AST_INVALID_INDEX ? u : v; }

stmt(x) ::= expr_call(u) . [PREFER_CALL]                { x = u.index; }
stmt(x) ::= definition(u) .                             { x = u; }
stmt(x) ::= stmt_var(u) .                               { x = u; }
stmt(x) ::= stmt_assign(u) .                            { x = u; }
stmt(x) ::= YIELD(kw) unpack_list(u) .                  { x = p->node( AST_EXPR_YIELD, kw.sloc, u.index ); }
stmt(x) ::= YIELD(kw) FOR expr_call(u) . [PREFER_CALL]  { x = p->node( AST_EXPR_YIELD_FOR, kw.sloc, u.index ); }
stmt(x) ::= DO(kw) block(u) END .                       { p->update_sloc( u, kw.sloc ); x = u; }
stmt(x) ::= IF(kw) expr(u) THEN(bdo) block(block) elif_list_opt else_opt END .
    {
        p->update_sloc( block, bdo.sloc );
        x = p->node( AST_STMT_IF, kw.sloc, u.index );
    }
stmt(x) ::= FOR(kw) r_name_list(u) ASSIGN expr COLON expr step_opt DO(bdo) block(block) END .
    {
        if ( u.is_list )
        {
            p->error( p->node_sloc( u.index ), "for step must declare a single variable, not a list" );
        }
        p->update_sloc( block, bdo.sloc );
        x = p->node( AST_STMT_FOR_STEP, kw.sloc, u.index );
    }
stmt(x) ::= FOR(kw) r_name_list(u) COLON expr DO(bdo) block(block) END .
    {
        p->update_sloc( block, bdo.sloc );
        x = p->node( AST_STMT_FOR_EACH, kw.sloc, u.index );
    }
stmt(x) ::= WHILE(kw) expr(u) DO(bdo) block(block) END .
    {
        p->update_sloc( block, bdo.sloc );
        x = p->node( AST_STMT_WHILE, kw.sloc, u.index );
    }
stmt(x) ::= REPEAT(kw) block(u) UNTIL expr .
    {
        p->update_sloc( u, kw.sloc );
        x = p->node( AST_STMT_REPEAT, kw.sloc, u );
    }
stmt(x) ::= BREAK(kw) .                                 { x = p->node( AST_STMT_BREAK, kw.sloc, AST_INVALID_INDEX ); }
stmt(x) ::= CONTINUE(kw) .                              { x = p->node( AST_STMT_CONTINUE, kw.sloc, AST_INVALID_INDEX ); }
stmt(x) ::= RETURN(kw) unpack_list(u) .                 { x = p->node( AST_STMT_RETURN, kw.sloc, u.index ); }
stmt(x) ::= THROW(kw) expr(u) .                         { x = p->node( AST_STMT_THROW, kw.sloc, u.index ); }

// Bare return is ambiguous when an expression follows, so it is restricted to
// appear only as the last statement in a block.
last_stmt(x) ::= RETURN(kw) .                           { x = p->node( AST_STMT_RETURN, kw.sloc, AST_INVALID_INDEX ); }

elif_list_opt(x) ::= . { x = AST_INVALID_INDEX; }
elif_list_opt(x) ::= elif_list_opt ELIF(kw) expr(u) THEN(bdo) block(block) .
    {
        x = AST_INVALID_INDEX;
        p->update_sloc( block, bdo.sloc );
        p->node( AST_ELIF, kw.sloc, u.index );
    }

else_opt(x) ::= . { x = AST_INVALID_INDEX; }
else_opt(x) ::= ELSE(bdo) block(block) .
    {
        x = AST_INVALID_INDEX;
        p->update_sloc( block, bdo.sloc );
    }

step_opt(x) ::= . { x = p->number_node( AST_EXPR_NUMBER, p->current_sloc(), 1.0 ); }
step_opt(x) ::= COLON expr(u) . { x = u.index; }


// ASSIGNMENTS

%type r_name_list { maybe_list_type }
%type r_lval_list { maybe_list_type }
%type r_lval_list_from_unpack_list { maybe_list_type }
%type assign_rval { maybe_list_type }
%type name_list { maybe_list_type }
%type op_assign { op_assign_type }

stmt_var ::= VAR r_name_list .
stmt_var ::= VAR r_name_list ASSIGN assign_rval .

stmt_assign ::= r_lval_list op_assign assign_rval .

r_name_list(x) ::= name_list(u) .
    {
        if ( ! u.is_list )
        {
            x = u;
        }
        else
        {
            x = { p->node( AST_NAME_LIST, p->node_sloc( u.index ), u.index ), true };
        }
    }

r_lval_list(x) ::= lval_list(u) .
    {
        if ( u.kind == EXPR_NAME || u.kind == EXPR_LVAL )
        {
            x = { u.index, false };
        }
        else if ( u.kind == EXPR_NAME_LIST || u.kind == EXPR_LVAL_LIST )
        {
            x = { p->node( AST_LVAL_LIST, p->node_sloc( u.index ), u.index ), true };
        }
        else
        {
            assert( ! "lval_list produced a non-lval" );
            x = { u.index, true };
        }
    }

r_lval_list_from_unpack_list(x) ::= unpack_list(u) .
    {
        if ( u.kind == EXPR_NAME || u.kind == EXPR_LVAL )
        {
            x = { u.index, false };
        }
        else if ( u.kind == EXPR_NAME_LIST || u.kind == EXPR_LVAL_LIST )
        {
            x = { p->node( AST_LVAL_LIST, p->node_sloc( u.index ), u.index ), true };
        }
        else
        {
            p->error( p->node_sloc( u.index ), "left hand side is not assignable" );
            x = { u.index, true };
        }
    }

assign_rval ::= unpack_list .
assign_rval ::= YIELD unpack_list .
assign_rval ::= YIELD FOR expr_call . [PREFER_CALL]
assign_rval ::= YIELD FOR expr_call ELLIPSIS .
assign_rval ::= r_lval_list_from_unpack_list op_assign assign_rval .

name(x) ::= IDENTIFIER(tok) .
    { x = p->string_node( AST_EXPR_NAME, tok.sloc, tok.text, tok.size ); }

name_list(x) ::= name(u) . { x = { u, false }; }
name_list(x) ::= name_list(u) COMMA name . { x = { u.index, true }; }

op_assign(x) ::= ASSIGN(tok) .          { x = { AST_INVALID_INDEX, tok.sloc }; }
op_assign(x) ::= MUL_ASSIGN(tok) .      { x = { p->node( AST_EXPR_MUL, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= DIV_ASSIGN(tok) .      { x = { p->node( AST_EXPR_DIV, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= INTDIV_ASSIGN(tok) .   { x = { p->node( AST_EXPR_INTDIV, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= MOD_ASSIGN(tok) .      { x = { p->node( AST_EXPR_MOD, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= ADD_ASSIGN(tok) .      { x = { p->node( AST_EXPR_ADD, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= SUB_ASSIGN(tok) .      { x = { p->node( AST_EXPR_SUB, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= CONCAT_ASSIGN(tok) .   { x = { p->node( AST_EXPR_CONCAT, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= LSHIFT_ASSIGN(tok) .   { x = { p->node( AST_EXPR_LSHIFT, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= RSHIFT_ASSIGN(tok) .   { x = { p->node( AST_EXPR_RSHIFT, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= ASHIFT_ASSIGN(tok) .   { x = { p->node( AST_EXPR_ASHIFT, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= BITAND_ASSIGN(tok) .   { x = { p->node( AST_EXPR_BITAND, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= BITXOR_ASSIGN(tok) .   { x = { p->node( AST_EXPR_BITXOR, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }
op_assign(x) ::= BITOR_ASSIGN(tok) .    { x = { p->node( AST_EXPR_BITOR, tok.sloc, AST_INVALID_INDEX ), tok.sloc }; }


// EXPRESSIONS

%type expr_lval { expr_type }
%type lval_list { expr_type }
%type expr_prefix { expr_type }
%type expr_call { expr_type }
%type expr_literal { expr_type }
%type expr_unary { expr_type }
%type expr_muldiv { expr_type }
%type expr_addsub { expr_type }
%type expr_shift { expr_type }
%type expr_bitand { expr_type }
%type expr_bitxor { expr_type }
%type expr_bitor { expr_type }
%type expr_compare { expr_type }
%type expr_not { expr_type }
%type expr_and { expr_type }
%type expr_or { expr_type }
%type expr_if { expr_type }
%type expr { expr_type }
%type unpack_list_opt { expr_type }
%type unpack_list { expr_type }

expr_lval(x) ::= IDENTIFIER(tok) .
    {
        x = { EXPR_NAME, p->string_node( AST_EXPR_NAME, tok.sloc, tok.text, tok.size ) };
    }
expr_lval(x) ::= expr_prefix(u) PERIOD(op) IDENTIFIER(tok) .
    {
        p->string_node( AST_EXPR_NAME, tok.sloc, tok.text, tok.size );
        x = { EXPR_LVAL, p->node( AST_EXPR_KEY, op.sloc, u.index ) };
    }
expr_lval(x) ::= expr_prefix(u) LSQ(op) expr RSQ .
    {
        x = { EXPR_LVAL, p->node( AST_EXPR_INDEX, op.sloc, u.index ) };
    }

lval_list(x) ::= expr_lval(u) .                                 { x = u; }
lval_list(x) ::= lval_list(u) COMMA expr_lval(v) .              { x = { expr_list_kind( u.kind, v.kind ), u.index }; }

expr_prefix(x) ::= expr_lval(u) .                               { x = u; }
expr_prefix(x) ::= expr_call(u) . [LPN]                         { x = u; }
expr_prefix(x) ::= LPN expr(u) RPN .                            { x = { EXPR_FULL, u.index }; }

expr_call(x) ::= expr_prefix(u) LPN(op) unpack_list_opt RPN .   { x = { EXPR_CALL, p->node( AST_EXPR_CALL, op.sloc, u.index ) }; }

expr_literal(x) ::= expr_prefix(u) . [PREFER_CALL]              { x = u; }
expr_literal(x) ::= NULL(tok) .                                 { x = { EXPR_FULL, p->node( AST_EXPR_NULL, tok.sloc, AST_INVALID_INDEX ) }; }
expr_literal(x) ::= FALSE(tok) .                                { x = { EXPR_FULL, p->node( AST_EXPR_FALSE, tok.sloc, AST_INVALID_INDEX ) }; }
expr_literal(x) ::= TRUE(tok) .                                 { x = { EXPR_FULL, p->node( AST_EXPR_TRUE, tok.sloc, AST_INVALID_INDEX ) }; }
expr_literal(x) ::= NUMBER(tok) .                               { x = { EXPR_FULL, p->number_node( AST_EXPR_NUMBER, tok.sloc, tok.n ) }; }
expr_literal(x) ::= STRING(tok) .                               { x = { EXPR_FULL, p->string_node( AST_EXPR_STRING, tok.sloc, tok.text, tok.size ) }; }

expr_unary(x) ::= expr_literal(u) .                             { x = u; }
expr_unary(x) ::= HASH(op) expr_unary(u) .                      { x = { EXPR_FULL, p->node( AST_EXPR_LENGTH, op.sloc, u.index ) }; }
expr_unary(x) ::= MINUS(op) expr_unary(u) .                     { x = { EXPR_FULL, p->node( AST_EXPR_NEG, op.sloc, u.index ) }; }
expr_unary(x) ::= PLUS(op) expr_unary(u) .                      { x = { EXPR_FULL, p->node( AST_EXPR_POS, op.sloc, u.index ) }; }
expr_unary(x) ::= TILDE(op) expr_unary(u) .                     { x = { EXPR_FULL, p->node( AST_EXPR_BITNOT, op.sloc, u.index ) }; }

expr_muldiv(x) ::= expr_unary(u) .                              { x = u; }
expr_muldiv(x) ::= expr_muldiv(u) ASTERISK(op) expr_unary .     { x = { EXPR_FULL, p->node( AST_EXPR_MUL, op.sloc, u.index ) }; }
expr_muldiv(x) ::= expr_muldiv(u) SOLIDUS(op) expr_unary .      { x = { EXPR_FULL, p->node( AST_EXPR_DIV, op.sloc, u.index ) }; }
expr_muldiv(x) ::= expr_muldiv(u) INTDIV(op) expr_unary .       { x = { EXPR_FULL, p->node( AST_EXPR_INTDIV, op.sloc, u.index ) }; }
expr_muldiv(x) ::= expr_muldiv(u) PERCENT(op) expr_unary .      { x = { EXPR_FULL, p->node( AST_EXPR_MOD, op.sloc, u.index ) }; }

expr_addsub(x) ::= expr_muldiv(u) .                             { x = u; }
expr_addsub(x) ::= expr_addsub(u) PLUS(op) expr_muldiv .        { x = { EXPR_FULL, p->node( AST_EXPR_ADD, op.sloc, u.index ) }; }
expr_addsub(x) ::= expr_addsub(u) MINUS(op) expr_muldiv .       { x = { EXPR_FULL, p->node( AST_EXPR_SUB, op.sloc, u.index ) }; }
expr_addsub(x) ::= expr_addsub(u) TILDE(op) expr_muldiv .       { x = { EXPR_FULL, p->node( AST_EXPR_CONCAT, op.sloc, u.index ) }; }

expr_shift(x) ::= expr_addsub(u) .                              { x = u; }
expr_shift(x) ::= expr_shift(u) LSHIFT(op) expr_addsub .        { x = { EXPR_FULL, p->node( AST_EXPR_LSHIFT, op.sloc, u.index ) }; }
expr_shift(x) ::= expr_shift(u) RSHIFT(op) expr_addsub .        { x = { EXPR_FULL, p->node( AST_EXPR_RSHIFT, op.sloc, u.index ) }; }
expr_shift(x) ::= expr_shift(u) ASHIFT(op) expr_addsub .        { x = { EXPR_FULL, p->node( AST_EXPR_ASHIFT, op.sloc, u.index ) }; }

expr_bitand(x) ::= expr_shift(u) .                              { x = u; }
expr_bitand(x) ::= expr_bitand(u) AMPERSAND(op) expr_shift .    { x = { EXPR_FULL, p->node( AST_EXPR_BITAND, op.sloc, u.index ) }; }

expr_bitxor(x) ::= expr_bitand(u) .                             { x = u; }
expr_bitxor(x) ::= expr_bitxor(u) CARET(op) expr_bitand .       { x = { EXPR_FULL, p->node( AST_EXPR_BITXOR, op.sloc, u.index ) }; }

expr_bitor(x) ::= expr_bitxor(u) .                              { x = u; }
expr_bitor(x) ::= expr_bitor(u) VBAR(op) expr_bitxor .          { x = { EXPR_FULL, p->node( AST_EXPR_BITOR, op.sloc, u.index ) }; }

expr_compare(x) ::= expr_bitor(u) .                             { x = u; }
expr_compare(x) ::= expr_compare(u) op_compare expr_bitor .     { x = { EXPR_FULL, p->node( AST_EXPR_COMPARE, p->node_sloc( u.index ), u.index ) }; }

op_compare(x) ::= EQ(op) .      { x = p->node( AST_OP_EQ, op.sloc, AST_INVALID_INDEX ); }
op_compare(x) ::= NE(op) .      { x = p->node( AST_OP_NE, op.sloc, AST_INVALID_INDEX ); }
op_compare(x) ::= LT(op) .      { x = p->node( AST_OP_LT, op.sloc, AST_INVALID_INDEX ); }
op_compare(x) ::= LE(op) .      { x = p->node( AST_OP_LE, op.sloc, AST_INVALID_INDEX ); }
op_compare(x) ::= GT(op) .      { x = p->node( AST_OP_GT, op.sloc, AST_INVALID_INDEX ); }
op_compare(x) ::= GE(op) .      { x = p->node( AST_OP_GE, op.sloc, AST_INVALID_INDEX ); }
op_compare(x) ::= IS(op) .      { x = p->node( AST_OP_IS, op.sloc, AST_INVALID_INDEX ); }
op_compare(x) ::= IS(op) NOT .  { x = p->node( AST_OP_IS_NOT, op.sloc, AST_INVALID_INDEX ); }

expr_not(x) ::= expr_compare(u) .                               { x = u; }
expr_not(x) ::= NOT(op) expr_not(u) .                           { x = { EXPR_FULL, p->node( AST_EXPR_NOT, op.sloc, u.index ) }; }

expr_and(x) ::= expr_not(u) .                                   { x = u; }
expr_and(x) ::= expr_and(u) AND(op) expr_not .                  { x = { EXPR_FULL, p->node( AST_EXPR_AND, op.sloc, u.index ) }; }

expr_or(x) ::= expr_and(u) .                                    { x = u; }
expr_or(x) ::= expr_or(u) OR(op) expr_and .                     { x = { EXPR_FULL, p->node( AST_EXPR_OR, op.sloc, u.index ) }; }

expr_if(x) ::= expr_or(u) .
    { x = u; }
expr_if(x) ::= IF(kw) expr_or(u) THEN expr expr_elif_list_opt ELSE expr .
    { x = { EXPR_FULL, p->node( AST_EXPR_IF, kw.sloc, u.index ) }; }

expr_elif_list_opt(x) ::= .
    { x = AST_INVALID_INDEX; }
expr_elif_list_opt(x) ::= expr_elif_list_opt ELIF(kw) expr(u) THEN expr .
    { x = AST_INVALID_INDEX; p->node( AST_EXPR_ELIF, kw.sloc, u.index ); }

expr(x) ::= expr_if(u) .                        { x = u; }
expr(x) ::= constructor(u) .                    { x = { EXPR_FULL, u }; }

unpack_list_opt(x) ::= .                        { x = { EXPR_EMPTY_LIST, AST_INVALID_INDEX }; }
unpack_list_opt(x) ::= unpack_list(u) .         { x = u; }

unpack_list(x) ::= term_list(u) .               { x = { u.kind, u.index }; }
unpack_list(x) ::= term_list(u) ELLIPSIS(op) .  { p->node( AST_EXPR_UNPACK, op.sloc, u.ilast ); x = { EXPR_UNPACK_LIST, u.index }; }

%type term_list { term_list_type }
term_list(x) ::= expr(u) .                      { x = { u.kind, u.index, u.index }; }
term_list(x) ::= term_list(u) COMMA expr(v) .   { x = { expr_list_kind( u.kind, v.kind ), u.index, v.index }; }


// CONSTRUCTORS

constructor ::= DEF LPN parameters RPN lambda_body .
constructor ::= DEF YIELD LPN parameters RPN lambda_body .
constructor ::= DEF prototype_opt object_keys END .
constructor ::= LSQ unpack_list_opt RSQ .
constructor ::= LBR keyval_list_opt RBR .

lambda_body ::= COLON expr .
lambda_body ::= block END .

parameters ::= .
parameters ::= param_list .
parameters ::= param_list ELLIPSIS .

param_list ::= IDENTIFIER .
param_list ::= param_list COMMA IDENTIFIER .

keyval_list_opt ::= .
keyval_list_opt ::= keyval_list_opt COMMA keyval .

keyval ::= expr COLON expr .


// DEFINITIONS

definition ::= DEF qual_name LPN parameters RPN block END .
definition ::= DEF YIELD qual_name LPN parameters RPN block END .
definition ::= DEF qual_name prototype_opt object_keys END .

qual_name ::= IDENTIFIER .
qual_name ::= qual_name PERIOD IDENTIFIER .

prototype_opt ::= .
prototype_opt ::= IS expr .

object_keys ::= .
object_keys ::= object_keys object_key .

object_key ::= IDENTIFIER COLON expr .
object_key ::= IDENTIFIER COLON expr SEMICOLON .
object_key ::= definition .


// TRY CATCH
/*
stmt ::= WITH unpack_list DO block END .
stmt ::= WITH unpack_list /* name_list *//* ASSIGN unpack_list DO block END .
stmt ::= TRY block catch_list_opt finally_opt END .

catch_list_opt ::= .
catch_list_opt ::= catch_list_opt catch .

catch ::= CATCH IDENTIFIER THEN block .
catch ::= CATCH IDENTIFIER IS expr THEN block .

finally_opt ::= FINALLY block .
*/

