--
--  n-body.kf
--  Based on code from the Computer Language Benchmarks Game
--  https://salsa.debian.org/benchmarksgame-team/benchmarksgame/
--

var SOLAR_MASS = 4 * pi * pi
var DAYS_PER_YEAR = 365.24

def body
    def self( x, y, z, vx, vy, vz, mass )
        self.x, self.y, self.z = x, y, z
        self.vx, self.vy, self.vz = vx, vy, vz
        self.mass = mass
    end
end

var bodies = [
    -- Sun
    body( 0, 0, 0, 0, 0, 0, SOLAR_MASS ),

    -- Jupiter
    body(
        4.84143144246472090e+00,
        -1.16032004402742839e+00,
        -1.03622044471123109e-01,
        1.66007664274403694e-03 * DAYS_PER_YEAR,
        7.69901118419740425e-03 * DAYS_PER_YEAR,
        -6.90460016972063023e-05 * DAYS_PER_YEAR,
        9.54791938424326609e-04 * SOLAR_MASS
    ),

    -- Saturn
    body
    (
        8.34336671824457987e+00,
        4.12479856412430479e+00,
        -4.03523417114321381e-01,
        -2.76742510726862411e-03 * DAYS_PER_YEAR,
        4.99852801234917238e-03 * DAYS_PER_YEAR,
        2.30417297573763929e-05 * DAYS_PER_YEAR,
        2.85885980666130812e-04 * SOLAR_MASS
    ),

    -- Uranus
    body
    (
        1.28943695621391310e+01,
        -1.51111514016986312e+01,
        -2.23307578892655734e-01,
        2.96460137564761618e-03 * DAYS_PER_YEAR,
        2.37847173959480950e-03 * DAYS_PER_YEAR,
        -2.96589568540237556e-05 * DAYS_PER_YEAR,
        4.36624404335156298e-05 * SOLAR_MASS
    ),

    -- Neptune
    body
    (
        1.53796971148509165e+01,
        -2.59193146099879641e+01,
        1.79258772950371181e-01,
        2.68067772490389322e-03 * DAYS_PER_YEAR,
        1.62824170038242295e-03 * DAYS_PER_YEAR,
        -9.51592254519715870e-05 * DAYS_PER_YEAR,
        5.15138902046611451e-05 * SOLAR_MASS
    ),
]

def advance( bodies, dt )
    for i = 0 : #bodies do
        var bi = bodies[ i ]
        for j = i + 1 : #bodies do
            var bj = bodies[ j ]
            var dx, dy, dz = bi.x - bj.x, bi.y - bj.y, bi.z - bj.z
            var distance = sqrt( dx * dx + dy * dy + dz * dz )
            var mag = dt / ( distance * distance * distance )
            var bim, bjm = bi.mass * mag, bj.mass * mag
            bi.vx -= dx * bjm
            bi.vy -= dy * bjm
            bi.vz -= dz * bjm
            bj.vx += dx * bim
            bj.vy += dy * bim
            bj.vz += dz * bim
        end
    end
    for bi : bodies do
        bi.x += dt * bi.vx
        bi.y += dt * bi.vy
        bi.z += dt * bi.vz
    end
end

def energy( bodies )
    var e = 0.0
    for i = 0 : #bodies do
        var bi = bodies[ i ]
        e += 0.5 * bi.mass * ( bi.vx * bi.vx + bi.vy * bi.vy + bi.vz * bi.vz )
        for j = i + 1 : #bodies do
            var bj = bodies[ j ]
            var dx, dy, dz = bi.x - bj.x, bi.y - bj.y, bi.z - bj.z
            var distance = sqrt( dx * dx + dy * dy + dz * dz )
            e -= ( bi.mass * bj.mass ) / distance
        end
    end
    return e
end

def offset_momentum( bodies )
    var px, py, pz = 0, 0, 0
    for bi : bodies do
        px += bi.vx * bi.mass
        py += bi.vy * bi.mass
        pz += bi.vz * bi.mass
    end
    var sun = bodies[ 0 ]
    sun.vx -= px / SOLAR_MASS
    sun.vy -= py / SOLAR_MASS
    sun.vz -= pz / SOLAR_MASS
end

var _, n = args ...
n = if n then number( n ) else 1000 end
offset_momentum( bodies )
print( string( energy( bodies ) ) ~ "\n" )
for i = 0 : n do
    advance( bodies, 0.01 )
end
print( string( energy( bodies ) ) ~ "\n" )

