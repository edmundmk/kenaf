--
--  sudoku.kf
--  Based on code from scriptorium
--  https://github.com/attractivechaos/plb
--

def sd_genmat()
    var R, C = [], []
    var r = 0
    C.resize( 729 )
    for i = 0 : 9 do
        for j = 0 : 9 do
            for k = 0 : 9 do
                C[ r ] = [
                    9 * i + j,
                    ( i // 3 ) * 27 + ( j // 3 ) * 9 + k + 81,
                    9 * i + k + 162,
                    9 * j + k + 243
                ]
                r += 1
            end
        end
    end
    R.resize( 324 )
    for c = 0 : 324 do
        R[ c ] = []
    end
    for r = 0 : 729 do
        for c2 = 0 : 4 do
            R[ C[ r ][ c2 ] ].append( r )
        end
    end
    return R, C
end

def sd_update( R, C, sr, sc, r, v )
    var min, min_c = 10, 0
    for c2 = 0 : 4 do
        sc[ C[ r ][ c2 ] ] += v * 128
    end
    for c2 = 0 : 4 do
        var c = C[ r ][ c2 ]
        if v > 0 then
            for r2 = 0 : 9 do
                var rr = R[ c ][ r2 ]
                sr[ rr ] += 1
                if sr[ rr ] != 0 then continue end
                for cc2 = 0 : 4 do
                    var cc = C[ rr ][ cc2 ]
                    sc[ cc ] -= 1
                    if sc[ cc ] < min then min, min_c = sc[ cc ], cc end
                end
            end
        else
            for r2 = 0 : 9 do
                var rr = R[ c ][ r2 ]
                sr[ rr ] -= 1
                if sr[ rr ] != 0 then continue end
                var p = C[ rr ]
                sc[ p[ 0 ] ] += 1
                sc[ p[ 1 ] ] += 1
                sc[ p[ 2 ] ] += 1
                sc[ p[ 3 ] ] += 1
            end
        end
    end
    return min, min_c
end

def sd_solve( R, C, s )
    var sr, sc = [], []
    sr.resize( 729 )
    for r = 0 : 729 do sr[ r ] = 0 end
    sc.resize( 324 )
    for c = 0 : 324 do sc[ c ] = 9 end
    var cr, cc = [], []
    cr.resize( 81 )
    cc.resize( 81 )
    var out = []
    var hints = 0
    out.resize( 81 )
    for i = 0 : 81 do
        var a = if s[ i ] >= "1" and s[ i ] <= "9" then codepoint( s[ i ] ) - codepoint( "1" ) else -1 end
        if a >= 0 then sd_update( R, C, sr, sc, i * 9 + a, 1 ) end
        if a >= 0 then hints += 1 end
        cr[ i ] = cc[ i ] = -1
        out[ i ] = a + 1
    end
    var ret = []
    var i, dir = 0, 1
    var min, min_c = 10, 0
    while true do
        while i >= 0 and i < 81 - hints do
            if dir == 1 then
                cc[ i ] = min_c
                if min > 1 then
                    for c = 0 : 324 do
                        if sc[ c ] < min then
                            min = sc[ c ]
                            cc[ i ] = c
                            if min <= 1 then break end
                        end
                    end
                end
                if min == 0 or min == 10 then
                    cr[ i ] = -1
                    dir = -1
                end
            end
            var c = cc[ i ]
            if dir == -1 and cr[ i ] >= 0 then
                sd_update( R, C, sr, sc, R[ c ][ cr[ i ] ], -1 )
            end
            var r2 = cr[ i ] + 1
            while r2 < 9 do
                if sr[ R[ c ][ r2 ] ] == 0 then break end
                r2 += 1
            end
            if r2 < 9 then
                min, min_c = sd_update( R, C, sr, sc, R[ c ][ r2 ], 1 ) ...
                cr[ i ] = r2
                dir = +1
                i += 1
            else
                cr[ i ] = -1
                dir = -1
                i -= 1
            end
        end
        if i < 0 then break end
        var y = []
        y.resize( 81 )
        for j = 0 : 81 do
            y[ j ] = out[ j ]
        end
        for j = 0 : i do
            var r = R[ cc[ j ] ][ cr[ j ] ]
            y[ r // 9 ] = r % 9 + 1
        end
        ret.append( y )
        i -= 1
        dir = -1
    end
end

