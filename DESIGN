kenaf is a lua-like language with a prototype-based object model.
it is designed to be as simple as possible.

goals of this language

    be simple
    be fast even without jit
    be easy to interface with C++
    look unintimidating and understadable for non-programmers
    make writing code for game objects straightforward

lua does a lot of this, so kenaf looks a lot like lua.  differences from lua:

    multiple value expressions are explicit, using trailing ...
    more operators (e.g. bitwise)
    operator precedence and comparisons are python-like
    generators/coroutines are usable without a coroutine library
    no metatables, instead have a prototype-based object model
        means kenaf is much less configurable but mostly the first thing
        everyone does is hack together objects anyway.
    objects (with keys), arrays (with integer indexes) and tables (with
        arbitrary indexes) are distinct types
    array indexes start at 0.
    0 is false.


automatic self/super:

a call x.y always passes x as first argument
a definition x.y declares 'self', and 'super' as 'superof( self )'

bare functions and lambdas don't have automatic self.

unpacking is not automatic.  varargs is a special value that can be unpacked.

    def f( args ... )
        a, b, c = f()       -- error, not enough values
        a, b, c = f() ...   -- ok, unpacks 3 results from f
        a, b, c = args      -- error, args isn't a real value
        a, b, c = args ...  -- ok
        a = [ args ... ]    -- unpacking allowed in array construction
        f( "x", args ... )  -- and in argument lists
        b, c, z = 3, a ...  -- ok, unpacks array
    end

comparisons are chained like in python

    if not 0 <= index < size then
    end

lenght operator, like lua

    for i = 0, #array do
    end

bitwise operators, including shifts

    a << b  left
    a >> b  logical right
    a ~>> b arithmetic right

tables and arrays

    var table = { "key" : value }
    var array = [ a, b, c ]

objects:

    def object
        key : value
        key : value
        def method()
        end
    end

    def object is prototype
        def self( p, q )
        end
    end

    var x = object( p, q )

prototype rules:

    once object has been used as a prototype, it's sealed and no keys can be
    added to it.

    primitive values, including bools, numbers, strings, functions, and
    generators/cothreads cannot be used as prototypes

functions:

    def function()
    end

out-of-line methods:

    def object end
    def object.method()
    end

lambdas

    var lambda = def() return x end
    var lambda = def() : x

generators must be marked with yield:

    def yield coroutine( param, param )
        param, param = yield expr, expr
        return
    end
    var lambda = def yield( param ) return y end

calling a generator function produces a generator

to delegate to a child generator use 'yield for'

    yield for subgenerator()

yield and unpacking

    yield a, b, c                   -- yields values a, b, c, discards results
    yield a, b, c ...               -- yields values a, b, unpack(c), discards results
    yield for a()                   -- calls generator a(), yields its values, discards values returned from a

    x = yield a, b, c               -- yields values a, b, c, assigns single result to x
    x = yield a, b, c ...           -- yields values a, b, unpack(c), assigns single result to x
    x, y, z = yield ... a, b, c     -- yields values a, b, c, assigns unpacked results to x, y, z
    x, y, z = yield ... a, b, c ... -- yields values a, b, unpack(c), assigns unpacked results to x, y, z
    x = yield for a()               -- calls generator a(), yielding, assigns single returned result to x
    x, y, z = yield for a() ...     -- calls generator a(), yielding, assigns unpacked results from a to x, y, z

    value = value           -- results in value
    list = value            -- results in list
    value = list            -- results in list
    list = list             -- results in list

statements

    a, b = b, a = c, d = e, f
    a = b *= c
    f()
    break
    continue
    return
    yield
    throw
    do
    end
    if expr then
    elif expr then
    end
    for i = start : stop do
    end
    for i = start : stop : step do
    end
    for k, v : generator do
    end
    while expr do
    end
    repeat
    until expr


builtins:

    global

    superof( object )
    haskey( object, string ) -> bool
    getkey( object, string ) -> value
    setkey( object, string, value ) -> value
    delkey( object, string )
    keys( object ) -> generator

    abs( n )
    max( n ... )
    min( n ... )
    pow( n, n )
    sqrt( n )
    sin( n )
    tan( n )
    cos( n )
    asin( n )
    acos( n )
    atan( n[, n ] )
    ceil( n )
    trunc( n )
    floor( n )
    round( n )
    isnan( n )
    isinf( n )
    isfinite( n )
    fmod( n, n )
    log2( n )
    log( n )
    exp( n )
    exp2( n )
    clz( n )
    ctz( n )

    pi
    tau
    nan
    infinity

    def object
    end

    def bool is object
    end

    def number is object
        def self( o ) return string_to_number( o ) end
    end

    def string is object
        def self( o ) return object_to_string( o ) end
    end

    def array is object
        def resize( n ) end
        def append( x ) end
        def extend( x ... ) end
        def pop() return x end
    end

    def table is object
        def has( k )
        def get( k, default )
        def del( k )
    end


extras, for the future.  don't need to catch exceptions necessarily to start
with.

    with exprlist do
    end
    with name, name = exprlist do
    end
    try
    catch name is prototype then
    catch name then
    finally
    end


choices for symbols, and why:

    //      floored division, seems most popular, \ is weird, ~ doesn't look enough like division
    >>      logical right shift, the opposite of <<.  shifts nowadays are more common on unsigned values
    ~>>     arithmetic right shift, because to call it >>> would be confusing with java/js logical shift.
                standard ml apparently uses this
    ~       for string concatenation, because .. just seems a little bit odd to me.
    --      inline comment, becuase // is already used.  similar to lua.
    /**/    for block comment.  using -- and /**/ together happens in a few languages, e.g. some SQL dialects.
    #       for length, like lua
    a:b:c   in range for loops, looks like python slicing, commas look too much like an unpack list
    :g      in foreach loops, I like colons ok, would be a bit weird to use keywords for one style of
                for but symbols for the other.


VM

    nun-boxing

        0000'0000'0000'0000
        0000'FFFF'FFFF'FFFF kn::object*

        000F'FFFF'FFFF'FFFF first double
        000F'FFFF'FFFF'FFFF -∞
        7FFF'FFFF'FFFF'FFFF -0
        8007'FFFF'FFFF'FFFE qNAN
        800F'FFFF'FFFF'FFFE sNaN
        800F'FFFF'FFFF'FFFF +∞
        FFFF'FFFF'FFFF'FFFF +0


    kv::selector
        kv::string* key

ENVIRONMENTS AND CAPTURE

All variables captured by inner functions are stored in environment records.

Each block containing variables that are captured by inner functions constructs
a new environment record.  Accesses to these variables are through the
environment record, even in the function where they are declared.

A function captures a set of environment records at the point it is declared,
either environment records created by the current function or copied from the
current function's capture list.

Accesses to captured variables are through the function's set of captured
environment records.


BYTECODE IDEAS

LDI instruction (to avoid loads of small constants from pool) if ADDI helps.
GET_METHOD instruction which does the equivalent of
    GET_KEY r, a, #'method_name'
    MOV r+1, a
Probably represent it in the IR by GET_KEY/MOV pair and then emit fused op.

FOR_STEP improvements:

    FOR_ITER r[2], a, b
        r[0] <- number( a )
        r[1] <- length( b )

    FOR_CAST r[2], a, b
        r[0] <- number( a )
        r[1] <- number( b )

    FOR_STEP r, a
        r <- number( a )

    FOR_LOOP /* for when we know step is 1? */
            /* could also save a register... */
    FOR_NEXT
            /* rename current FOR_STEP */

